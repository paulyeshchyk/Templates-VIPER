//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import Foundation
import UIKit

class {{ prefix }}{{ module_info.name }}: NSObject, {{ prefix }}{{ module_info.name }}Protocol {

    //MARK: - NSObject

    deinit {

    }

    var rootWindow: UIWindow
    var root: UIViewController?

    //MARK: -  {{ prefix }}{{ module_info.name }}ModuleProtocol
    func launch() {

        self.root = self.splitModule.makeRoot()
    }

    var splitModule:{{ prefix }}SplitModule
    let listModule:{{ prefix }}ListModuleProtocol
    var detailModule:{{ prefix }}DetailModuleProtocol
    let emptyDetailModule:{{ prefix }}EmptyDetailModuleProtocol

    required init(window:UIWindow) {

        let dm = {{ prefix }}ListDataManager()

        splitModule = {{ prefix }}SplitModule(window: window)
        listModule = {{ prefix }}ListModule(window: window, datasource:dm)
        detailModule = {{ prefix }}DetailModule(window: window)
        emptyDetailModule = {{ prefix }}EmptyDetailModule(window: window)

        rootWindow = window
        super.init()

        splitModule.masterViewCallback = {() in

            return self.listModule.presenter.viewController
        }

        splitModule.detailViewCallback = {() in

            return self.detailModule.presenter.viewController
        }

        splitModule.emptyViewCallback = {() in

            return self.emptyDetailModule.presenter.viewController
        }

        listModule.openOutput = {(listItem) in

            let detailItem = NNDetailModel(nameValue: listItem.text)
            let splitItem = NNSplitModel(aIdent: listItem.ident, aText: listItem.text)

            self.detailModule.detail = detailItem
            self.splitModule.presenter.selectedItem = splitItem
        }

        listModule.addOutput = {() in

        }

        detailModule.saveOutput = {(detailItem) in

            let listItem = NNListModel(aIdent: detailItem.name, aText: detailItem.name)
            self.listModule.refreshPonso(listItem)
        }

        detailModule.cancelOutput = {() in

        }
    }
}
