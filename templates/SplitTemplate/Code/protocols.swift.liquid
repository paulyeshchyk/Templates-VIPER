//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import Foundation
import UIKit

typealias {{ prefix }}{{ module_info.name }}AddDetailOutput = () -> ()
typealias {{ prefix }}{{ module_info.name }}MasterViewCallback = () -> UIViewController
typealias {{ prefix }}{{ module_info.name }}DetailViewCallback = () -> UIViewController
typealias {{ prefix }}{{ module_info.name }}EmptyViewCallback = () -> UIViewController

protocol {{ prefix }}{{ module_info.name }}ViewPresenterOutput {

    var masterViewCallback: {{ prefix }}{{ module_info.name }}MasterViewCallback? { get set }
    var detailViewCallback: {{ prefix }}{{ module_info.name }}DetailViewCallback? { get set }
    var emptyViewCallback: {{ prefix }}{{ module_info.name }}EmptyViewCallback? { get set }
}

protocol {{ prefix }}{{ module_info.name }}ModuleProtocol {

    var interactor:{{ prefix }}{{ module_info.name }}InteractorProtocol {get set}
    var presenter:{{ prefix }}{{ module_info.name }}PresenterProtocol {get set}
    var splitView:{{ prefix }}{{ module_info.name }}ViewProtocol {get set}

    func makeRoot() -> UIViewController
    func pushFrom(navigationController: UINavigationController)
    func popFrom(navigationController: UINavigationController)

    var view: UIViewController { get }
    var rootWindow: UIWindow { get }

}

protocol {{ prefix }}{{ module_info.name }}ViewProtocol {

    var viewController: UIViewController { get }
    func setSplittedControllers(viewControllers:[UIViewController])
}

protocol {{ prefix }}{{ module_info.name }}InteractorProtocol {

    var selectedItem: {{ prefix }}{{ module_info.name }}Model? { get set }
}

protocol {{ prefix }}{{ module_info.name }}PresenterProtocol {

    var presenterOutput: {{ prefix }}{{ module_info.name }}ViewPresenterOutput? { get set }
    var viewController: UIViewController { get }
    var interactor: {{ prefix }}{{ module_info.name }}InteractorProtocol? {get set}

    var selectedItem: {{ prefix }}{{ module_info.name }}Model? { get set }

    func rebuildPresenters()
    init(view:{{ prefix }}{{ module_info.name }}ViewProtocol, splitInteractor:{{ prefix }}{{ module_info.name }}InteractorProtocol)

}

