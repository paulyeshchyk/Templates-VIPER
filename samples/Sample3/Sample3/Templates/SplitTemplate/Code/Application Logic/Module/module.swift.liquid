//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit

class {{ prefix }}{{ module_info.name }}Module: NSObject, {{ prefix }}{{ module_info.name }}ModuleProtocol, {{ prefix }}{{ module_info.name }}ViewPresenterOutput {

    var presenter:{{ prefix }}{{ module_info.name }}PresenterProtocol
    var splitView:{{ prefix }}{{ module_info.name }}ViewProtocol
    var interactor:{{ prefix }}{{ module_info.name }}InteractorProtocol
    var rootWindow:UIWindow

    var masterViewCallback: {{ prefix }}{{ module_info.name }}MasterViewCallback?
    var detailViewCallback: {{ prefix }}{{ module_info.name }}DetailViewCallback?
    var emptyViewCallback: {{ prefix }}{{ module_info.name }}EmptyViewCallback?

    var view: UIViewController {

        get {

            return presenter.viewController
        }
    }

    required init(window: UIWindow) {

        rootWindow = window

        splitView = {{ prefix }}{{ module_info.name }}ViewController()
        interactor = {{ prefix }}{{ module_info.name }}Interactor()

        presenter = {{ prefix }}{{ module_info.name }}Presenter(view: splitView, splitInteractor: interactor)

        super.init()
        presenter.presenterOutput = self

    }


    func pushFrom(navigationController:UINavigationController) {

        navigationController.pushViewController(self.view, animated: true)
    }

    func popFrom(navigationController: UINavigationController) {

        navigationController.popViewControllerAnimated(true)
    }

    func makeRoot() -> UIViewController{

        presenter.rebuildPresenters()

        rootWindow.rootViewController = presenter.viewController
        rootWindow.makeKeyAndVisible()
        return self.view
    }

}
