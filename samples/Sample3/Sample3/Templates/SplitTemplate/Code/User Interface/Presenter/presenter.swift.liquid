//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import Foundation
import UIKit

class {{ prefix }}{{ module_info.name }}Presenter: NSObject, {{ prefix }}{{ module_info.name }}PresenterProtocol {

    var presenterOutput: {{ prefix }}{{ module_info.name }}ViewPresenterOutput?
    var splitView: {{ prefix }}{{ module_info.name }}ViewProtocol
    var interactor: {{ prefix }}{{ module_info.name }}InteractorProtocol?
    var selectedItem: {{ prefix }}{{ module_info.name }}Model? {

        didSet {

            self.interactor?.selectedItem = self.selectedItem
            self.rebuildPresenters()
        }
    }

    var viewController: UIViewController {

        get {

            return splitView.viewController
        }
    }

    required init(view:{{ prefix }}{{ module_info.name }}ViewProtocol, splitInteractor:{{ prefix }}{{ module_info.name }}InteractorProtocol) {

        splitView = view
        interactor = splitInteractor
    }


    //MARK: - private

    func rebuildPresenters() {

        guard let interactor = self.interactor else {

            return
        }

        var vcs:[UIViewController] = []



        guard let output = self.presenterOutput else {

            return
        }

        guard let masterViewCallback = output.masterViewCallback else {

            return
        }

        let masterView = masterViewCallback()
        vcs.append(masterView)


        let hasSelectedItem = interactor.selectedItem

        if ((hasSelectedItem != nil) && hasSelectedItem?.text.characters.count != 0) {

            guard let detailViewCallback = output.detailViewCallback else {

                return
            }

            let detail = detailViewCallback()
            vcs.append(detail)

        } else {

            guard let emptyViewCallback = output.emptyViewCallback else {

                return
            }

            let empty = emptyViewCallback()
            vcs.append(empty)
        }

        splitView.setSplittedControllers(vcs)
    }
}

