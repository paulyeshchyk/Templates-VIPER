//
//  {{ prefix }}{{ module_info.name }}{{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import Foundation
import UIKit

class {{ prefix }}{{ module_info.name }}Presenter: NSObject, {{ prefix }}{{ module_info.name }}PresenterProtocol, {{ prefix }}{{ module_info.name }}InteractorOutputProtocol {

	//MARK: - NSObject    
	
    deinit {
        
        rootInteractor.output = nil
    }

	//MARK: - {{ prefix }}{{ module_info.name }}PresenterProtocol
	    
    var rootView:{{ prefix }}{{ module_info.name }}ViewProtocol
    var rootInteractor:{{ prefix }}{{ module_info.name }}InteractorProtocol
    var output:{{ prefix }}{{ module_info.name }}PresenterOutputProtocol? 
    var viewController: UIViewController {

        get {

            let result = UINavigationController(rootViewController: rootView.viewController)
            return result
        }
    }

    var detail: {{ prefix }}{{ module_info.name }}Model? {

        didSet {

            let predicate = NSPredicate(format: "name == %@", argumentArray: ["Test"])
            self.rootInteractor.fetchData(predicate)
        }
    }

    required init(view: {{ prefix }}{{ module_info.name }}ViewProtocol, interactor: {{ prefix }}{{ module_info.name }}InteractorProtocol) {

        rootView = view
        rootInteractor = interactor
        
        super.init()

        rootInteractor.output = self
        
    }

    func viewHasBeenLoaded() {
        
        let saveItem = UIBarButtonItem(barButtonSystemItem:.Save, target: self, action: #selector({{ prefix }}{{ module_info.name }}Presenter.saveItem(_:)))
        self.rootView.viewController.navigationItem.rightBarButtonItems = [saveItem]

        let predicate = NSPredicate(format: "name == %@", argumentArray: ["Test"])
        self.rootInteractor.fetchData(predicate)
    }

    func nameChanged(value: String) {

        self.rootInteractor.changeName(value, forDetail: self.detail)
    }

    func saveItem(sender:AnyObject?) {

    }

    func presentError(error: NSError) {
        
        self.rootView.nameValue = nil
        self.rootView.sampleError = error.localizedDescription
    }

    //MARK: - {{ prefix }}{{ module_info.name }}InteractorOutputProtocol

    func presentDetail(detail:{{ prefix }}{{ module_info.name }}Model) {

        self.rootView.nameValue = detail.name
        self.rootView.sampleError = nil
    }
}
